<?php

namespace Webdevvie\Pakket\Tests;

use Mockery\Matcher\Closure;
use Mockery\MockInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Webdevvie\Pakket\Builder;

class BuilderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var MockInterface
     */
    private $outputInterface;

    /**
     * @var Builder
     */
    private $builder;

    /**
     * @var array
     */
    private $writelines = '';

    public function setUp()
    {

        $this->outputInterface = \Mockery::mock('Symfony\Component\Console\Output\OutputInterface');
        $closure = new Closure(function ($out) {
            $out = str_replace(__DIR__,"",$out);
            $this->writelines .= $out . "\n";
            return true;
        });
        $this->outputInterface->shouldReceive('writeln')->with($closure);
        $this->builder = new Builder($this->outputInterface);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function tearDown()
    {
        \Mockery::close();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testBuilder()
    {
        //test things by building itself!
        $this->builder->build(
            realpath(__DIR__ . '/../'),
            __DIR__ . '/Resources/testBuild.phar',
            json_decode(file_get_contents(realpath(__DIR__ . '/../pakket.json')), true)
        );
//        file_put_contents(__DIR__ . '/Resources/build.out', $this->writelines);
        $expectedOutput = file_get_contents(__DIR__ . '/Resources/build.out');
        if (file_exists(realpath(__DIR__ . '/Resources/testBuild.phar'))) {
            unlink(realpath(__DIR__ . '/Resources/testBuild.phar'));
        }
        $this->assertEquals($expectedOutput, $this->writelines);
    }

    public function testBuilderCustomStub()
    {
        $config = json_decode(file_get_contents(realpath(__DIR__ . '/../pakket.json')), true);
        $config['stub'] = '';
        $config['stubFile'] = 'defaultStubTest';
        touch(__DIR__ . '/Resources/testCustomStub.phar');
        $this->builder->build(
            realpath(__DIR__ . '/Resources/testproj'),
            __DIR__ . '/Resources/testCustomStub.phar',
            $config
        );
//        file_put_contents(__DIR__ . '/Resources/build.customstub.out', $this->writelines);
        $expectedOutput = file_get_contents(__DIR__ . '/Resources/build.customstub.out');
        if (file_exists(realpath(__DIR__ . '/Resources/testCustomStub.phar'))) {
            unlink(realpath(__DIR__ . '/Resources/testCustomStub.phar'));
        }
        $this->assertEquals($expectedOutput, $this->writelines);
    }

    public function testBuilderCustomStubDefault()
    {
        $config = json_decode(file_get_contents(realpath(__DIR__ . '/../pakket.json')), true);
        $config['stub'] = '';
        $config['stubFile'] = __DIR__.'/Resources/defaultStub';
        $this->builder->build(
            realpath(__DIR__ . '/Resources/testproj'),
            __DIR__ . '/Resources/testCustomStubDefault.phar',
            $config
        );
//        file_put_contents(__DIR__ . '/Resources/build.testCustomStubDefault.out', $this->writelines);
        $expectedOutput = file_get_contents(__DIR__ . '/Resources/build.testCustomStubDefault.out');
        if (file_exists(realpath(__DIR__ . '/Resources/testCustomStubDefault.phar'))) {
            unlink(realpath(__DIR__ . '/Resources/testCustomStubDefault.phar'));
        }
        $this->assertEquals($expectedOutput, $this->writelines);
    }
    public function testBuilderHardPath()
    {
        $config = json_decode(file_get_contents(realpath(__DIR__ . '/../pakket.json')), true);
        $config['stub'] = '';
        $config['stubFile'] = __DIR__.'/Resources/defaultStub';
        $config['sources'][__DIR__.'/Resources/extra/']="";
        $this->builder->build(
            realpath(__DIR__ . '/Resources/testproj'),
            __DIR__ . '/Resources/hardpath.phar',
            $config
        );
//        file_put_contents(__DIR__ . '/Resources/build.hardpath.out', $this->writelines);
        $expectedOutput = file_get_contents(__DIR__ . '/Resources/build.hardpath.out');
        if (file_exists(realpath(__DIR__ . '/Resources/hardpath.phar'))) {
            unlink(realpath(__DIR__ . '/Resources/hardpath.phar'));
        }
        $this->assertEquals($expectedOutput, $this->writelines);
    }

    public function testBuilderCustomStubInvalid()
    {
        $config = json_decode(file_get_contents(realpath(__DIR__ . '/../pakket.json')), true);
        $config['stub'] = '';
        $config['stubFile'] = 'stoober';
        $this->builder->build(
            realpath(__DIR__ . '/Resources/testproj/'),
            __DIR__ . '/Resources/testCustomStubInvalid.phar',
            $config
        );
//        file_put_contents(__DIR__ . '/Resources/build.invalidstub.out', $this->writelines);
        $expectedOutput = file_get_contents(__DIR__ . '/Resources/build.invalidstub.out');
        $this->assertEquals($expectedOutput, $this->writelines);
    }

    public function testBuilderNostub()
    {
        $config = json_decode(file_get_contents(realpath(__DIR__ . '/../pakket.json')), true);
        $config['stub'] = '';
        $config['stubFile'] = '';
        $this->builder->build(
            realpath(__DIR__ . '/../'),
            __DIR__ . '/Resources/nostub.phar',
            $config
        );

//        file_put_contents(__DIR__ . '/Resources/build.nostub.out', $this->writelines);
        $expectedOutput = file_get_contents(__DIR__ . '/Resources/build.nostub.out');

        $this->assertEquals($expectedOutput, $this->writelines);
    }

    public function testBuilderNoTarget()
    {
        $config = json_decode(file_get_contents(realpath(__DIR__ . '/../pakket.json')), true);
        $config['targetPath'] = '';
        $this->builder->build(
            realpath(__DIR__ . '/../'),
            '',
            $config
        );
//        file_put_contents(__DIR__ . '/Resources/build.notarget.out', $this->writelines);
        $expectedOutput = file_get_contents(__DIR__ . '/Resources/build.notarget.out');
        $this->assertEquals($expectedOutput, $this->writelines);
    }

    public function testBuilderNoTargetNullConfig()
    {

        $this->builder->build(
            realpath(__DIR__ . '/../'),
            '',
            null
        );
//        file_put_contents(__DIR__ . '/Resources/build.notargetnullconfig.out', $this->writelines);
        $expectedOutput = file_get_contents(__DIR__ . '/Resources/build.notargetnullconfig.out');
        $this->assertEquals($expectedOutput, $this->writelines);
    }
    public function testBuilderNoTargetNullConfigInvalidPath()
    {

        $this->builder->build(
            realpath(__DIR__ . '/Resources/notthere'),
            '',
            null
        );
//        file_put_contents(__DIR__ . '/Resources/build.invalidpath.out', $this->writelines);
        $expectedOutput = file_get_contents(__DIR__ . '/Resources/build.invalidpath.out');
        $this->assertEquals($expectedOutput, $this->writelines);
    }
}